# N만큼 배열에 자연수 x를 넣어야하고 0이 입력되면 0이 주어진 횟수만큼 가장 큰 값을 출력하고
# 출력된 값은 배열에서 제거되어야 한다.
# 힙배열은 heap함수를 통해 파이썬에서 구현가능합니다.
### 여기서 주의할 점은 원래 힙정렬이 기본은 최솟값 정렬이다. 그러므로 -을 사용하여 
### 최댓값 정렬로 바꾸어서 풀고 나중에 -를 다시 붙여 원래값으로 되돌려야한다.

import sys
import heapq

n = int(sys.stdin.readline())
max_heap = []    # 최대힙이 저장될 리스트

for _ in range(n):
    number = int(sys.stdin.readline())   # n의 길이만큼 숫자 입력을 받습니다
    
    if number > 0:     # 0보다 클때
        heapq.heappush(max_heap, -number)   # number를 힙에 추가한다(최대 힙구해서 -붙임)
        
    else:      # 0보다 크지 않을때(0일때)
        if not max_heap:   # 만약 리스트에 요소가 없을때
            print(0)     # 0을 출력
        else:         # 리스트에 요소가 있을때
            print(-heapq.heappop(max_heap))  
            # 힙에서 가장 작은 아이템을 팝하고 그 값을 반환한다. 함수 자체에 값반환이되어
            # print랑 같이 쓸 수 있다고 한다.(-로 계산해서 값 출력시 -를 다시 붙인다)
            
# 힙의 개념을 이해하는데에도 시간이 꽤 걸렸다.
# 주 핵심은 부모가 자식보다 크다는 사실이다. 다행히 임포트할 수 있는 함수가 있어
# 복잡한 코드를 사용하지 않고도 구현 가능했지만, 이해하는 것이 쉽지 않았다.